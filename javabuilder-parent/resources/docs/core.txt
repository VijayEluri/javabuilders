Core Features
=============

Obtaining references to created components
------------------------------------------

**Convention over configuration**

In most cases, we use a straightforward convention-over-configuration approach. If you define an object
in YAML and then define a Java instance instance variable with the same name and of compatible type,
then JavaBuilders will set the reference on it automatically (even if it is a private variable, it does not
need to be public).

Simple example:

    *MyFrame.yaml*::
  
        JFrame:
             - JButton(name=okButton,text=OK,onAction=save)

    *MyFrame.java*::
    
        public class MyFrame extends JFrame {
             //this object's reference will be set automatically
             private JButton okButton;
             private BuildResult result = SwingJavaBuilder.build(this)
             public MyFrame(){
                  //reference is set! NullPointerException will not occur
                  okButton.setText("New text");
             }
             private void save() {
                 //execute some business logic...
             }
        }
    
**Obtaining references manually**

You can also just fetch the object reference manually from the returned BuildResult object::

    public MyFrame() {
           JButton okButton = (JButton)result.get("okButton");
    }
    
But the convention over configuration approach is much preferred.

Hooking up event listeners to Java methods
------------------------------------------

Overview
^^^^^^^^

The standard approach is to provide a standard "onEvent" property (e.g. "onAction", "onClicked",
"onDoubleClicked") and then pass it a single method name or a collection of method names.

**Single method**::

    JButton(text=OK, onAction=save)
    
**Multiple methods to be executed in sequence**::

    JButton(text=OK, onAction=[validateInput,save,close])
    
If any of the methods return a boolean false , then the other methods get aborted and will not be called.
Simple convention over configuration approach

Mapping to methods on the Java side
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

When you specify a method name (e.g. "save") in the YAML file, it will attempt to execute the
corresponding method in the Java class. Different signatures of the method are supported, in order of
preference:

* method(calling object type or its superclass, event specific class)::

     private void save(JButton button, ActionEvent event) {}
     
* method(event specific class)::
    
    private void save(ActionEvent event) {}
    
* method(calling object type or its superclass)::

    private void save(JButton button) {}
    
* method()::

    private void save() {}
    
Enter whichever one you want and JavaBuilders will find it and execute it. If it finds multiple ones, it will
execute the first one it finds based on the preference above. If none are found, a BuildException will be
thrown right away during build time. So, you do not have to actually test your event listener logic by
manually clicking on the button or menu item, the validation occurs right away as part of the build
process. This simplifies unit testing and limits the risk of lost type safety.

Databinding
-----------

Binding is defined by adding a "bind" root node after all the controls have been defined. Unlike in most
other languages, the binding is not defined at the property level, but is a stand-alone node of its own.
This is done to enforce separation of concerns and ensure clarity. You can see all your data binding in
one place, all together.

Sample (assume we have a backing JFrame JavaBean with two public properties "lastName" and "firstName")::

     JFrame(name=frame,title=Hallo):
          - JTextField(name=firstNameField)
          - JTextField(name=lastNameField)
          - JButton(name=saveButton, text=Save)
          - layout: |
                 []                      [grow]
                 >"First name:"          firstNameField
                 >"Last name:"           lastNameField
                 >saveButton+*
     bind:
           - this.title : "Hello, ${firstNameField.text}" #bind the frame title to show last name using an EL expression 
           - this.firstName : firstNameField.text         #bind the public Java property to the text field's text value, using a direct simple expression

Databinding requirements
^^^^^^^^^^^^^^^^^^^^^^^^
In order for the binding to work between public properties, they must fire a "property change" event on
the "set" and the parent class must provide the "addPropertyChangeListener" and "removePropertyChangeListener" methods. 
This is all part of the standard Beans Binding requirements. A good example can be found in the Bound Properties Java tutorial:
http://java.sun.com/docs/books/tutorial/javabeans/properties/bound.html
 
Supported features
^^^^^^^^^^^^^^^^^^

In order to integrate as best as possible with each UI toolkit, JavaBuilders rely on the best toolkit-specific
library for databinding. This means that the Swing JavaBuilder uses Beans Binding (JSR 295), while the
SWT JavaBuilder uses JFace DataBinding.

Not all databinding engines provide the same functionality. For example, Beans Binding does provide
support for EL expressions in data binding (hence you can use them for the Swing JavaBuilder), but the
JFace Databinding engine does not (and therefore they are not supported for the SWT JavaBuilder).

Input validation
----------------

Similar to data binding, input validation is configured via a separate root level node called *validate*::

     JFrame(name=frame,title=Binding Frame,size=packed):
           - JTextField(name=fName)
           - JTextField(name=lName)
           - JButton(name=ok, text=OK, onAction=($validate,save,cancel))
           - JButton(name=cancel, text=Cancel, onAction=cancel)
           - MigLayout: |
               []              [grow,200px]
               >"First name:"  fName
               >:Last name:"   lName
               >ok+*=1,cancel=1           [grow,bottom]
     bind:
          - firstName: fName.text
          - lastName: lName.text
     validate:
          - fName.text: {label: First Name, mandatory: true, minLength : 5}
          
Invoking input validation
^^^^^^^^^^^^^^^^^^^^^^^^^
If you want to do in from the YAML file, just put *$validate* as the method name in any event handler, e.g.::
 
    JButton(name=saveBtn,text=Save,onAction=($validate,save,close))
 
If you want to do it from the Java then you just need to call the *validate()* method on the BuildResult object that was returned::
 
     private BuildResult result = SwingJavaBuilder.build(this);
      
     //validate user input
     private boolean validate() {
          return result.validate();
     }
     
Field label for error messages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The "label" property is used to define the name of the field that will be using in any error messages. It is
 localizable, so you can sent it a resource key instead, e.g.::
 
     validate:
          - fName.text: {label: label.firstName, mandatory: true, minLength : 5}

Validator routines
^^^^^^^^^^^^^^^^^^
The following validator routines are currently available:

======================   ====================================================   =======================================
Validation type          Example                                                Comment
======================   ====================================================   =======================================
mandatory                mandatory: true
minLength                minLength : 5
maxLength                maxLength : 5
regex                    regex: "[a-zA-Z0-9]+"                                  Uses default validation message

                         regex: "[a-zA-Z0-9]+",                                 Uses custom error messagee
                         regexMessage: "''{0}'' must be a number or letter"
minValue                 minValue: 5
maxValue                 maxValue: 50
dateFormat               dateFormat: yyyy/mm/dd
emailAddress             emailAddress: true
======================   ====================================================   =======================================

**Full example**::
 
     validate:
          - mandatory.text: {label: Mandatory Field, mandatory: true}
          - date.text: {label: Date Field, dateFormat: "yyyy/mm/dd"}
          - email.text: {label: E-Mail, email: true}
          - minmax.text: {label: Min/Max Length, minLength: 5, maxLength: 10}
          - regex.text: {label: Regex, regex: "[a-zA-Z0-9]+"}
          - regex2.text: {label: Regex, regex: "[a-zA-Z0-9]+", regexMessage: "''{0}'' must be a number or letter"}
          - long.text: {label: Min/Max Long, minValue: 5, maxValue: 50, mandatory: true}
 
Adding custom validators
^^^^^^^^^^^^^^^^^^^^^^^^
     
 The default validator routines not powerful enough for you? You can easily add custom validation logic to
 be executed together with the built-in routines via Java-side code::
 
     result.getValidators().add(new IValidator() {
          public void validate(Object value, ValidationMessageList list) {
              if (!isValid) {
                          list.add(new ValidationMessage("Input is not valid 'cause I say so"));
              }
          }
     });
     
Executing long running methods on a background thread
-----------------------------------------------------
 
A common issue in most UI toolkits is that the application locks up if a long running process is running on
the EDT (Event Dispatch Thread). In this case, the recommended solution is to execute it on a
background thread and if possible, provide some sort of progress indicator to the user letting them know
about the current status of this process (e.g. saving large amounts of data to a database).

Method Annotation
^^^^^^^^^^^^^^^^^
 
In JavaBuilders, this is accomplished by simply annotating the long running method with a
*@DoInBackground* annotation (which provides some attributes that can customize how the long
running process is handled).::

     @Retention(RetentionPolicy.RUNTIME)
     @Target(ElementType.METHOD)
     public @interface DoInBackground {
              /**
               * @return Progress message
               */
              String progressMessage() default "label.processing";
              /**
               * @return If background task is cancelable or not
               */
              boolean cancelable() default false;
              /**
               * @return Default start value for progress bar
               */
               int progressStart() default 1;
               /**
                * @return Default end value for progress bar
                */
               int progressEnd() default 100;
               /**
                * @return Current progress value
                */
               int progressValue() default 1;
               /**
                * @return Indicates if task should block UI with a popup or not
                */
               boolean blocking() default true;
               /**
                * @return Indicates to show indeterminate progress indicator. Overrides the progress
     start/end/value if set to true
                */
               boolean indeterminateProgress() default true;
     }
     
    
Any method that is annotated as such must implement a signature that accepts an object of type
BackgroundEvent , which allows the background method to communicate with the UI's progress
indicator and even cancel itself, if the user requests it, e.g.::

     @DoInBackground(cancelable=true, progressStart=1, progressEnd=100, progressValue=1, indeterminateProgress=false)
     private void save(BackgroundEvent evt) {
           System.out.println("SAVE...");
           for(int i = 0; i < 100; i++) {
                  if (evt.getCancelStatus() != CancelStatus.REQUESTED) {
                        try {
                             Thread.currentThread().sleep(100);
                             evt.setProgressValue(i + 1);
                             evt.setProgressMessage(String.format("Processing %s of %s...",
                             evt.getProgressValue(), evt.getProgressEnd()));
                        } catch (InterruptedException e) {}
                  } else {
                        evt.setCancelStatus(CancelStatus.PROCESSING);
                        System.out.println("Cancelling...");
                        evt.setCancelStatus(CancelStatus.COMPLETED);
                        break;
                  }
           }
           System.out.println("SAVE END...");
     }
     
Executing multiple methods together
-----------------------------------
 
A typical scenario in an input dialog that occurs when a user presses the Save button is:
  
1. validate input
2. save the data (this can take a long time)
3. close the window
 
The way to handle this is to have the button execute multiple methods in sequence,
within ``[method1,method2,method3]`` brackets, e.g.::
 
    JButton(text=Save,onAction=[$validate,save,close])
    
On the Java side, the long running method is annotated as such::
 
     @DoInBackground(indeterminateProgress=true)
     private void save() { //long running process }
     
     private void close() {
           setVisible(false);
           dispose();
     }
     
The methods after the long running method (i.e. *"close"* in this example), will only execute after the
long running method has finished, they will not run in parallel, even though they are on different threads.
Hence, the sequence of events is preserved.
 
Custom progress indicators for long running methods
---------------------------------------------------

The default handler will pop up a blocking window with a progress dialog (and an optional "Cancel" button)
only for methods that are flagged as *blocking=true*. For non-blocking methods, it does nothing in terms of the UI.

However, non-blocking background methods may still benefit from showing their progress status in a custom
progress bar (or using some progress API, such as Eclipse RCP Task API or the equivalent in NetBeans RCP).

In order to make this possible, instances of BackgroundEventListener may be added.::

    public interface BackgroundEventListener extends EventListener {
    
        /**
         * Fired before a background task starts
         * @param evt
         */
        public void backgroundTaskStarted(BuildResult r, BackgroundEvent evt);
        
        /**
         * Fired after a background task ends
         * @param evt Event object
         */
        public void backgroundTaskEnded(BuildResult r, BackgroundEvent evt);
        
    }

These can be added either at the *global* level (i.e. for all components) on the builder config, e.g.::

       SwingJavaBuilder.getConfig().addBackgroundEventListener(new BackgroundEventListener() {
            @Override
            public void backgroundTaskStarted(BuildResult r, BackgroundEvent evt) {
                //notify common progress indicator about a new background task
            }
            
            @Override
            public void backgroundTaskEnded(BuildResult r, BackgroundEvent evt) {
                //notify common progress indicator that a background task has ended
            }
        });
        
or can be local (i.e. just for the current component)::

        BuildResult r = SwingJavaBuilder.build(this)
        r.addBackgroundEventListener(new BackgroundEventListener() {
            @Override
            public void backgroundTaskStarted(BuildResult r, BackgroundEvent evt) {
                //notify some local progress bar that task is starting
            }
            
            @Override
            public void backgroundTaskEnded(BuildResult r, BackgroundEvent evt) {
                //notify some local progress bar that task is ending
            }
        });        
 
The BackgroundEvent object itself includes full *PropertyChangeSupport*, so you can add listeners
to monitor its properties and updated the progress bar min/max/value/message accordingly. 
 
Domain-specific Implementations
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
In Swing JavaBuilder, long running methods are handled by using the standard SwingWorker library. A
Swing progress dialog will popup up informing the user that a process is running. If the method flagged
itself as cancelable, the Cancel button on the progress dialog will be enabled, allowing the user to cancel
the task if it runs for too long.
 
For the SWT JavaBuilder the plan is to support something similar or alternatively plug into the JFace
Progress/Tasks API.
 
As you can see, JavaBuilders does not have a "one size fits all" approach and for each toolkit we plan to
use the best option available on that specific platform.
 
Internationalization
--------------------

Internationalizaton support in any Builder is provided at two levels: global and class-level. If any resource
bundle is present (either at the global or class level), the internationalization support will automatically
get activated.

Global Resource Bundles
^^^^^^^^^^^^^^^^^^^^^^^

In your main() just add the list of global application resource bundles to the configuration of your builder, e.g.::

    SwingJavaBuilder.getConfig().addResourceBundle("Resources");
    
or::
 
    ResourceBundle myResourceBundle = ....
    SwingJavaBuilder.getConfig().addResourceBundle(myResourceBundle);
    
Class-level Resource Bundles
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If you need to have additional class-level resource bundles, just pass them in during the buld request::

    private ResourceBundle bundle = ResourceBundle.getBundle("MyClassBundle");
    private BuildResult result = SwingJavaBuilder.build(this, bundle);
        
The builder will look at the class-level bundles first for a key and if not found, will search through the
global ones.

Usage
^^^^^

Once you register a resource bundle, you can pass a resource name directly to any of the properties that
have been flagged as localizable, e.g.

    *YAML*::
    
        JButton(name=okButton, text=button.ok)
        
    *Properties file*::
    
        button.ok=OK
        
Enum property values
--------------------

When building an object, if the specified property type is an Enum of any sort, the builder will
automatically allow you to enter it just using the enum constant, without the actual enum name prefix.

Enums defined like constant Integers
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If your enum is defined using this type of naming convention::

    //enum defined like static int constants
    enum StartPosition{ CENTER_IN_SCREEN, CENTER_IN_PARENT, MANUAL }
    
In YAML, you can do then either::
    
    JXFrame(startPosition=CENTER_IN_PARENT)
    
or the Java camel-case named equivalent::

    JXFrame(startPosition=centerInParent)
    
Enums defined using Pascal case
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
If your enum is defined instead using a Pascal case syntax, e.g.::

    //enum defined like static int constants
    enum StartPosition{ CenterInScreen, CenterInParent, Manual}
    
then you can still do either the original constant value or the camel-case named equivalent::

    JXFrame(startPosition=CenterInParent)

or::

    JXFrame(startPosition=centerInParent)
    
Static int constant property values
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Similar to the way Enum values are handled, the default behaviour is that when a String value is passed
to an int property, the builder will attempt to find a corresponding final static int value on the
Java class and use that. Both camel-case values and actual static constant names can be used, e.g.::

    JFrame(defaultCloseOperation=EXIT_ON_CLOSE)
    
or::

    JFrame(defaultCloseOperation=exitOnClose)

Using custom components
-----------------------

Sooner or later you will want to create a custom component instance from within your YAML file.
However, the current builder does not know how to map your custom component name (e.g. "MyCustomPanel") to an actual Java class.
In order to let it know all you have to do is define an instance variable with the same type in your
Java-side code and it will automatically find the corresponding class definition that way, e.g.

    *YAML*::
    
         JFrame(title=frame.title,state=max,defaultCloseOperation=exitOnClose):
              - ComponentsPanel(name=componentsPanel,tabTitle=tab.components)
              - BorderPanel(name=borderPanel,tabTitle=tab.borders)
              - CardLayoutPanel(name=cardLayoutPanel,tabTitle=tab.cardLayout)
              - FlowLayoutPanel(name=flowLayoutPanel,tabTitle=tab.flowLayout)
              - MigLayoutPanel1(name=migLayoutPanel1,tabTitle=tab.migLayout1)

    *Java*::
    
         private   ComponentsPanel componentsPanel;
         private   FlowLayoutPanel flowLayoutPanel;
         private   CardLayoutPanel cardLayoutPanel;
         private   MigLayoutPanel1 migLayoutPanel1;
         private   BorderPanel borderPanel;

Custom global commands
----------------------

Custom global commands allows you to basically define a named reusable piece of code that you can
refer to anywhere in your YAML file's event handlers.

Custom commands are prefixed with "$" and the system ships with two pre-defined global commands:

* *$validate* : triggers the input validation logic, if defined::

    JButton(name=okButton, text=OK, onAction=[$validate,save,finishSave])
    
* *$confim* : displays a standard "Are you sure?" confirmation dialog that can be invoked before any destructive action::

    JButton(name=deleteButton, text=Delete, onAction=[$confirm,delete])
    
Adding your own custom commands
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You need to implement the ICustomCommand interface and add it to your builder's configuration::

    SwingJavaBuilder.getConfig().addCustomCommand("$confirm", new ICustomCommand<Boolean>() {
           public Boolean process(BuildResult result, Object source) {
                  Component c = null;
                  if (result.getCaller() instanceof Component) {
                            c = (Component) result.getCaller();
                  }
                  int value = JOptionPane.showConfirmDialog(c, 
                                    Builder.getResourceBundle().getString("question.areYouSure"),
                                    Builder.getResourceBundle().getString("title.confirmation"),
                                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                  if (value == JOptionPane.YES_OPTION) {
                        return true;
                  } else {
                        return false;
                  }
           }
     });
     
Build events
------------

If you need to hook up some custom pre- or post-processing every time a build is executed (e.g. to
integrate a 3rd party library like JavaCSS , you can add a listener to the builder), preferably in your
main() method , e.g.::

     //event listeners
     SwingJavaBuilder.getConfig().addBuildListener(new BuildAdapter() {
               @Override
               public void buildStarted(BuildEvent evt) {
                          System.out.println(("Build started from caller: " + evt.getSource()));
               }
               @Override
               public void buildEnded(BuildEvent evt) {
                          System.out.println(("Build ended for root object: " +
     evt.getResult().getRoot()));
               }
     });
     
Processing the proper object
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In the buildStarted event you should access ``evt.getSource()``, which refers to the caller that
initiated the build (i.e. your Java class). 

However, in the *buildEnded* event it is better to access ``evt.getResult().getRoot()``, 
which is the root object that was created from the build file.

The two are not necessarily the same (e.g. in order to create a JPanel from a YAML file your Java-side
class does not have to extend JPanel at all, it is optional). This is useful in toolkits like SWT that do not
allow you to extend particular component types.

Hot deployment of UI components
-------------------------------

In order to further maximize developer productivity, all the JavaBuilders come with support for
dynamically updating components while running the application. This means you can edit your YAML
files and preview them in your app by just re-opening the panel/dialog being edited, without the need to
restart the whole application.

In order to do this you need to pass the ``"javabuilders.dev.src"`` property to the Java VM on
program startup and have it point to the relative path where your source code is vs. the compiled .class
files.

In Eclipse, where the classes are in "bin" and the source code usually in "src" you need to pass this VM
argument in your run configuration::

     -Djavabuilders.dev.src=../src
     
That's it! Now the builder will read the YAML files from the source folder, instead of the bin folder,
meaning you can keep editing them while the app is running and immediately see the changes as soon
as you re-open the current component you were working on.
