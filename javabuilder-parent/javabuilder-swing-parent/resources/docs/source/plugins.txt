.. highlight:: java

Plugins
=======

The core Swing JavaBuilder library can be extended via plugins that provide integration with
best-of-breed external Swing libraries

Glazed Lists
------------

GlazedLists is a best-of-breed open source library geared towards making databinding, sorting and
filtering for Swing and SWT controls easier and more productive. For a full overview on how GlazedList
works, please visit their website: http://publicobject.com/glazedlists/

In particular, check out their detailed tutorial: https://docs.google.com/Doc?id=dc5md22b_0g456kwd8
and screencasts: http://publicobject.com/glazedlists/media/Glazed_Lists_in_25_lines_of_code.mov

In order to register the GlazedList plugin you need to execute the following code
in your ``main()``::

    SwingGlazedListsConfig.init();

Below you will find information on how GlazedLists are integrated into the JavaBuilders library.

JList
^^^^^
 
**EventListModel**

The JList-specific model in GlazedLists is called EventListModel. You will need to define a
GlazedLists EventList in your Java code to hold the master list of objects and point the
EventListModel.source property in the YAML file to it.

    *Java*::
    
     public class GlazedListJListPanel extends JPanel {
           private EventList<String> values = new BasicEventList<String>();
           private BuildResult result;
           public GlazedListJListPanel() {
                result = SwingJavaBuilder.build(this);
           }
     }
     
    *YAML*:
    
    .. code-block:: yaml
    
         JPanel:
               - JList(name=list):
                    EventListModel(name=model,source=values)
                    
When you add/remove items in your EventList, they will automatically be propagated to the JList EventListModel.

JComboBox
^^^^^^^^^
 
**EventComboBoxModel**

The JComboBox-specific model in GlazedLists is called EventComboBoxModel. You will need to define  a GlazedLists EventList 
in your Java code to hold the master list of objects and point the EventComboBoxModel.source property in the YAML file to it.
 
    *Java*::
    
         public class GlazedListJListPanel extends JPanel {
               private EventList<String> values = new BasicEventList<String>();
               private BuildResult result;
               public GlazedListJListPanel() {
                    result = SwingJavaBuilder.build(this);
               }
         }
         
    *YAML*:
    
    .. code-block:: yaml
    
     JPanel:
           - JComboBox(name=box):
                EventComboBoxModel(name=model,source=values)
                
When you add/remove items in your EventList, they will automatically be propagated to the JComboBox EventComboBoxModel.
 
JTable
^^^^^^

**EventTableModel**

The JTable-specific model in GlazedLists is called EventTableModel. You will need to define a GlazedLists EventList in your 
Java code to hold the master list of objects and point the EventTableModel.source property in the YAML file to it.
 
    *Java*::
    
         public class Person {
              private String firstName;
              private String lastName;
              private Date birthDate;
              //getters and setters for all properties...
         }
 
         public class GlazedListJListPanel extends JPanel {
              private EventList<Person> values = new BasicEventList<Person>();
              private BuildResult result;
              public GlazedListJListPanel() {
                   result = SwingJavaBuilder.build(this);
              }
         }

    *YAML*:
    
    .. code-block:: yaml
 
         JPanel:
              - JTable(name=list):
                    - EventTableModel(name=model,source=values)
                    
 When you add/remove items in your EventList, they will automatically be propagated to the JTable EventTableModel.
 
**Controlling table columns**BasicEventList

The sample code shown above displays by default all properties that can be found in the Person POJO
as table columns. Usually though you would want to maintain some control over that, as well as customize 
certain parameters of the column (e.g. the header string). 

The simplest way to accomplish this is to define a columns=[] element:

.. code-block:: yaml

     JPanel:
          - JTable(name=list):
               - EventTableModel(name=model,source=values,columns=[firstName,lastName])
               
The example above will display only the "firstName" and "lastName" properties as columns. Alternatively,
you can to explicitly define the TableColumn instances:

.. code-block:: yaml
 
      JPanel:
          - JTable(name=list):
               - EventTableModel(name=model,source=values)
               - TableColumn(name=firstName,headerValue=column.firstName)
               - TableColumn(name=lastName,headerValue=column.lastName)
               
Since the "headerValue" column is localizable, it will automatically fetch the corresponding string key
from the configured resource bundles.
 
Yet another option is to define all the columns you need via ``columns=[]`` and then just define the
TableColumn instance if you need to customize it further (e.g. add a cell renderer or editor).
 
**Localizing column headers**

When you define a list of columns in the ``columns=[]`` parameter, the builder will attempt to
automatically look up the header name for it using the following strategy:

1. look for a resource key equal to "SimpleClassName.PropertyName", e.g. "Person.firstName"
2. look for a resource key equal to "PropertyName", e.g. "firstName"
3. if no resource keys are found, attempt to build a header directly from the property name, e.g. "firstName" becomes "First Name"
 
**Handling duplicate column names**

Within a single YAML file, all object names must be unique. So what happens if we have let's say two
tables that display data from different POJOs (or maybe different views of the same POJO) that happen
to have the same names? In this particular case, you can use the ``source`` property of the TableColumn level. 

If this property is defined, the builder will use that instead of ``name`` to map a TableColumn to a POJO's property.:

.. code-block:: yaml

     JPanel:
          - JTable(name=list1):
                - EventTableModel(name=model,source=values)
                - TableColumn(name=column1,source=firstName,headerValue=column.firstName)
                - TableColumn(name=column2,source=lastName,headerValue=column.lastName)
          - JTable(name=list2):
                - EventTableModel(name=model,source=values)
                - TableColumn(name=column3,source=firstName,headerValue=column.firstName)
                - TableColumn(name=column4,source=lastName,headerValue=column.lastName)
                
In the sample above, two different tables display the same POJO data by using the optional "source"
to avoid name clashes on ``TableColumn.name``.
 
**Sorting**

In order to enable sorting, you have to add the sort property, which has two allowed values:

* ``single`` - sorts by single column only
* ``multi`` - allows sorting by multiple columns

Sorting is activated by the user clicking with the mouse on the column headers.:

.. code-block:: yaml

     JPanel:
          - JTable(name=list):
                - EventTableModel(name=model,source=values,columns=[firstName,lastName],sort=multi)

In order to specify a pre-defined initial sort, pass in the list of column names into the ``sortBy`` property, e.g.:

.. code-block:: yaml
 
     EventTableModel(source=values,columns=[firstName,lastName,birthDate],
          sort=multi,sortBy=[birthDate,lastName])
          
.. note::
 
   The example above should a be a single line in your YAML file (it's wrapped around here purely for display purposes).
    
**Accessing the SortedList**
   
When applying the ``sort`` functionality, Swing JavaBuilder automatically creates a new GlazedLists ``SortedList``
or re-uses an existing one, if named properly.
    
The naming convention to use is the name of the source ``EventList`` with a "Sorted" suffix, e.g:    

.. code-block:: java
    
    private EventList<MyPojo> pojos = new BasicEventList<MyPojo>();
    private SortedList<MyPojo> pojosSorted;
     
If the sorted list reference is null during the build time, it will get updated to the reference that was auto-created.
If it is not null, the existing reference will be re-used instead of creating a new one.