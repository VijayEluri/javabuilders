Abstract
=====================

**Swing JavaBuilder : making Swing development productive**

    "Just started on using the Swing JavaBuilder and i must say i like it. Just replaced 170 rules of Java code
    with only 13 lines YAML"

Comment posted the JavaBuilders forum

The Swing JavaBuilder is a library whose sole goal is to maximize the productivity of a Swing developer.
It's main goal is tackling all the Swing pain points, in particular the complexity and verbosity of the API
and reducing it to the smallest amount of code possible.

This is accomplished by moving all the boring gruntwork of Swing interface creation to an external YAML
file, which has a 1-to-1 match with a backing Java class (e.g. a JFrame or JPanel) that is built from that
file. This allows to follow a pure MVC pattern where the YAML contains nothing but the view, while the
Java class is (mostly) the controller.

As an added bonus, the Swing JavaBuilder offers integrated support for data binding (using Beans
Binding), input validation, background task processing (using
SwingWorker) and last but not least, an integrated layout management DSL built-on top of the amazing
MigLayout layout manager

In essence, the Swing JavaBuilder is an aggregator of best-of-breed Swing solutions into one common,
integrated toolkit that makes creating Swing user interfaces a breeze

*Note*:
YAML is a file format that is a superset of JSON. We will cover it in more detail in future chapters. It's
very simple to understand, edit and maintain. It's main advantage over both XML and JSON is the lack of
any opening or closing tags, since it implements hierarchical data relationships via whitespace
indentation (similar to the Python programming language).
